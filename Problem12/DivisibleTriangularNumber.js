// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?
const listDivisors = (n) => {
    let list = []
    let noOfDivisors 
    for(let i = 1; i <= Math.sqrt(n); i++){
        if(n % i === 0){
            if(parseInt((n/i), 10) == i){
                list.push(i)
            }else {
                list.push(i)
                list.push(n/i)
            }
        }
    }
    noOfDivisors = list.length
    return noOfDivisors
}
// console.log(listDivisors(76576500))



const triangleNumber = (n) =>{
    let triNumber = 0
    for(let i =n; 0 < i; i--){
        triNumber += i
    }
    // console.log(triNumber);
    return triNumber
}
// triangleNumber()
// console.log(triangleNumber(76576500))
const DivisibleNumber = ()=>{

    let numberOfDivisors = 1
    let index = 1
    let output 
    while(numberOfDivisors < 500){
        let number = triangleNumber(index)
        output = triangleNumber(index)
        numberOfDivisors = listDivisors(number)
        index++
        // console.log(number)
    }
    // console.log(output);
    return output
}
// DivisibleNumber()

module.exports = DivisibleNumber
